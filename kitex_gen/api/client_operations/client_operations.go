// Code generated by Kitex v0.4.2. DO NOT EDIT.

package client_operations

import (
	api "ClyMQ/kitex_gen/api"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return client_OperationsServiceInfo
}

var client_OperationsServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Client_Operations"
	handlerType := (*api.Client_Operations)(nil)
	methods := map[string]kitex.MethodInfo{
		"pub":      kitex.NewMethodInfo(pubHandler, newClient_OperationsPubArgs, newClient_OperationsPubResult, false),
		"pingpong": kitex.NewMethodInfo(pingpongHandler, newClient_OperationsPingpongArgs, newClient_OperationsPingpongResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.2",
		Extra:           extra,
	}
	return svcInfo
}

func pubHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Client_OperationsPubArgs)
	realResult := result.(*api.Client_OperationsPubResult)
	success, err := handler.(api.Client_Operations).Pub(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClient_OperationsPubArgs() interface{} {
	return api.NewClient_OperationsPubArgs()
}

func newClient_OperationsPubResult() interface{} {
	return api.NewClient_OperationsPubResult()
}

func pingpongHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Client_OperationsPingpongArgs)
	realResult := result.(*api.Client_OperationsPingpongResult)
	success, err := handler.(api.Client_Operations).Pingpong(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newClient_OperationsPingpongArgs() interface{} {
	return api.NewClient_OperationsPingpongArgs()
}

func newClient_OperationsPingpongResult() interface{} {
	return api.NewClient_OperationsPingpongResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Pub(ctx context.Context, req *api.PubRequest) (r *api.PubResponse, err error) {
	var _args api.Client_OperationsPubArgs
	_args.Req = req
	var _result api.Client_OperationsPubResult
	if err = p.c.Call(ctx, "pub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Pingpong(ctx context.Context, req *api.PingPongRequest) (r *api.PingPongResponse, err error) {
	var _args api.Client_OperationsPingpongArgs
	_args.Req = req
	var _result api.Client_OperationsPingpongResult
	if err = p.c.Call(ctx, "pingpong", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
